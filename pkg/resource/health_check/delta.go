// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package health_check

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}
	compareTags(delta, a, b)

	if ackcompare.HasNilDifference(a.ko.Spec.HealthCheckConfig, b.ko.Spec.HealthCheckConfig) {
		delta.Add("Spec.HealthCheckConfig", a.ko.Spec.HealthCheckConfig, b.ko.Spec.HealthCheckConfig)
	} else if a.ko.Spec.HealthCheckConfig != nil && b.ko.Spec.HealthCheckConfig != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.HealthCheckConfig.AlarmIdentifier, b.ko.Spec.HealthCheckConfig.AlarmIdentifier) {
			delta.Add("Spec.HealthCheckConfig.AlarmIdentifier", a.ko.Spec.HealthCheckConfig.AlarmIdentifier, b.ko.Spec.HealthCheckConfig.AlarmIdentifier)
		} else if a.ko.Spec.HealthCheckConfig.AlarmIdentifier != nil && b.ko.Spec.HealthCheckConfig.AlarmIdentifier != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.HealthCheckConfig.AlarmIdentifier.Name, b.ko.Spec.HealthCheckConfig.AlarmIdentifier.Name) {
				delta.Add("Spec.HealthCheckConfig.AlarmIdentifier.Name", a.ko.Spec.HealthCheckConfig.AlarmIdentifier.Name, b.ko.Spec.HealthCheckConfig.AlarmIdentifier.Name)
			} else if a.ko.Spec.HealthCheckConfig.AlarmIdentifier.Name != nil && b.ko.Spec.HealthCheckConfig.AlarmIdentifier.Name != nil {
				if *a.ko.Spec.HealthCheckConfig.AlarmIdentifier.Name != *b.ko.Spec.HealthCheckConfig.AlarmIdentifier.Name {
					delta.Add("Spec.HealthCheckConfig.AlarmIdentifier.Name", a.ko.Spec.HealthCheckConfig.AlarmIdentifier.Name, b.ko.Spec.HealthCheckConfig.AlarmIdentifier.Name)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.HealthCheckConfig.AlarmIdentifier.Region, b.ko.Spec.HealthCheckConfig.AlarmIdentifier.Region) {
				delta.Add("Spec.HealthCheckConfig.AlarmIdentifier.Region", a.ko.Spec.HealthCheckConfig.AlarmIdentifier.Region, b.ko.Spec.HealthCheckConfig.AlarmIdentifier.Region)
			} else if a.ko.Spec.HealthCheckConfig.AlarmIdentifier.Region != nil && b.ko.Spec.HealthCheckConfig.AlarmIdentifier.Region != nil {
				if *a.ko.Spec.HealthCheckConfig.AlarmIdentifier.Region != *b.ko.Spec.HealthCheckConfig.AlarmIdentifier.Region {
					delta.Add("Spec.HealthCheckConfig.AlarmIdentifier.Region", a.ko.Spec.HealthCheckConfig.AlarmIdentifier.Region, b.ko.Spec.HealthCheckConfig.AlarmIdentifier.Region)
				}
			}
		}
		if len(a.ko.Spec.HealthCheckConfig.ChildHealthChecks) != len(b.ko.Spec.HealthCheckConfig.ChildHealthChecks) {
			delta.Add("Spec.HealthCheckConfig.ChildHealthChecks", a.ko.Spec.HealthCheckConfig.ChildHealthChecks, b.ko.Spec.HealthCheckConfig.ChildHealthChecks)
		} else if len(a.ko.Spec.HealthCheckConfig.ChildHealthChecks) > 0 {
			if !ackcompare.SliceStringPEqual(a.ko.Spec.HealthCheckConfig.ChildHealthChecks, b.ko.Spec.HealthCheckConfig.ChildHealthChecks) {
				delta.Add("Spec.HealthCheckConfig.ChildHealthChecks", a.ko.Spec.HealthCheckConfig.ChildHealthChecks, b.ko.Spec.HealthCheckConfig.ChildHealthChecks)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.HealthCheckConfig.Disabled, b.ko.Spec.HealthCheckConfig.Disabled) {
			delta.Add("Spec.HealthCheckConfig.Disabled", a.ko.Spec.HealthCheckConfig.Disabled, b.ko.Spec.HealthCheckConfig.Disabled)
		} else if a.ko.Spec.HealthCheckConfig.Disabled != nil && b.ko.Spec.HealthCheckConfig.Disabled != nil {
			if *a.ko.Spec.HealthCheckConfig.Disabled != *b.ko.Spec.HealthCheckConfig.Disabled {
				delta.Add("Spec.HealthCheckConfig.Disabled", a.ko.Spec.HealthCheckConfig.Disabled, b.ko.Spec.HealthCheckConfig.Disabled)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.HealthCheckConfig.EnableSNI, b.ko.Spec.HealthCheckConfig.EnableSNI) {
			delta.Add("Spec.HealthCheckConfig.EnableSNI", a.ko.Spec.HealthCheckConfig.EnableSNI, b.ko.Spec.HealthCheckConfig.EnableSNI)
		} else if a.ko.Spec.HealthCheckConfig.EnableSNI != nil && b.ko.Spec.HealthCheckConfig.EnableSNI != nil {
			if *a.ko.Spec.HealthCheckConfig.EnableSNI != *b.ko.Spec.HealthCheckConfig.EnableSNI {
				delta.Add("Spec.HealthCheckConfig.EnableSNI", a.ko.Spec.HealthCheckConfig.EnableSNI, b.ko.Spec.HealthCheckConfig.EnableSNI)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.HealthCheckConfig.FailureThreshold, b.ko.Spec.HealthCheckConfig.FailureThreshold) {
			delta.Add("Spec.HealthCheckConfig.FailureThreshold", a.ko.Spec.HealthCheckConfig.FailureThreshold, b.ko.Spec.HealthCheckConfig.FailureThreshold)
		} else if a.ko.Spec.HealthCheckConfig.FailureThreshold != nil && b.ko.Spec.HealthCheckConfig.FailureThreshold != nil {
			if *a.ko.Spec.HealthCheckConfig.FailureThreshold != *b.ko.Spec.HealthCheckConfig.FailureThreshold {
				delta.Add("Spec.HealthCheckConfig.FailureThreshold", a.ko.Spec.HealthCheckConfig.FailureThreshold, b.ko.Spec.HealthCheckConfig.FailureThreshold)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.HealthCheckConfig.FullyQualifiedDomainName, b.ko.Spec.HealthCheckConfig.FullyQualifiedDomainName) {
			delta.Add("Spec.HealthCheckConfig.FullyQualifiedDomainName", a.ko.Spec.HealthCheckConfig.FullyQualifiedDomainName, b.ko.Spec.HealthCheckConfig.FullyQualifiedDomainName)
		} else if a.ko.Spec.HealthCheckConfig.FullyQualifiedDomainName != nil && b.ko.Spec.HealthCheckConfig.FullyQualifiedDomainName != nil {
			if *a.ko.Spec.HealthCheckConfig.FullyQualifiedDomainName != *b.ko.Spec.HealthCheckConfig.FullyQualifiedDomainName {
				delta.Add("Spec.HealthCheckConfig.FullyQualifiedDomainName", a.ko.Spec.HealthCheckConfig.FullyQualifiedDomainName, b.ko.Spec.HealthCheckConfig.FullyQualifiedDomainName)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.HealthCheckConfig.HealthThreshold, b.ko.Spec.HealthCheckConfig.HealthThreshold) {
			delta.Add("Spec.HealthCheckConfig.HealthThreshold", a.ko.Spec.HealthCheckConfig.HealthThreshold, b.ko.Spec.HealthCheckConfig.HealthThreshold)
		} else if a.ko.Spec.HealthCheckConfig.HealthThreshold != nil && b.ko.Spec.HealthCheckConfig.HealthThreshold != nil {
			if *a.ko.Spec.HealthCheckConfig.HealthThreshold != *b.ko.Spec.HealthCheckConfig.HealthThreshold {
				delta.Add("Spec.HealthCheckConfig.HealthThreshold", a.ko.Spec.HealthCheckConfig.HealthThreshold, b.ko.Spec.HealthCheckConfig.HealthThreshold)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.HealthCheckConfig.IPAddress, b.ko.Spec.HealthCheckConfig.IPAddress) {
			delta.Add("Spec.HealthCheckConfig.IPAddress", a.ko.Spec.HealthCheckConfig.IPAddress, b.ko.Spec.HealthCheckConfig.IPAddress)
		} else if a.ko.Spec.HealthCheckConfig.IPAddress != nil && b.ko.Spec.HealthCheckConfig.IPAddress != nil {
			if *a.ko.Spec.HealthCheckConfig.IPAddress != *b.ko.Spec.HealthCheckConfig.IPAddress {
				delta.Add("Spec.HealthCheckConfig.IPAddress", a.ko.Spec.HealthCheckConfig.IPAddress, b.ko.Spec.HealthCheckConfig.IPAddress)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.HealthCheckConfig.InsufficientDataHealthStatus, b.ko.Spec.HealthCheckConfig.InsufficientDataHealthStatus) {
			delta.Add("Spec.HealthCheckConfig.InsufficientDataHealthStatus", a.ko.Spec.HealthCheckConfig.InsufficientDataHealthStatus, b.ko.Spec.HealthCheckConfig.InsufficientDataHealthStatus)
		} else if a.ko.Spec.HealthCheckConfig.InsufficientDataHealthStatus != nil && b.ko.Spec.HealthCheckConfig.InsufficientDataHealthStatus != nil {
			if *a.ko.Spec.HealthCheckConfig.InsufficientDataHealthStatus != *b.ko.Spec.HealthCheckConfig.InsufficientDataHealthStatus {
				delta.Add("Spec.HealthCheckConfig.InsufficientDataHealthStatus", a.ko.Spec.HealthCheckConfig.InsufficientDataHealthStatus, b.ko.Spec.HealthCheckConfig.InsufficientDataHealthStatus)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.HealthCheckConfig.Inverted, b.ko.Spec.HealthCheckConfig.Inverted) {
			delta.Add("Spec.HealthCheckConfig.Inverted", a.ko.Spec.HealthCheckConfig.Inverted, b.ko.Spec.HealthCheckConfig.Inverted)
		} else if a.ko.Spec.HealthCheckConfig.Inverted != nil && b.ko.Spec.HealthCheckConfig.Inverted != nil {
			if *a.ko.Spec.HealthCheckConfig.Inverted != *b.ko.Spec.HealthCheckConfig.Inverted {
				delta.Add("Spec.HealthCheckConfig.Inverted", a.ko.Spec.HealthCheckConfig.Inverted, b.ko.Spec.HealthCheckConfig.Inverted)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.HealthCheckConfig.MeasureLatency, b.ko.Spec.HealthCheckConfig.MeasureLatency) {
			delta.Add("Spec.HealthCheckConfig.MeasureLatency", a.ko.Spec.HealthCheckConfig.MeasureLatency, b.ko.Spec.HealthCheckConfig.MeasureLatency)
		} else if a.ko.Spec.HealthCheckConfig.MeasureLatency != nil && b.ko.Spec.HealthCheckConfig.MeasureLatency != nil {
			if *a.ko.Spec.HealthCheckConfig.MeasureLatency != *b.ko.Spec.HealthCheckConfig.MeasureLatency {
				delta.Add("Spec.HealthCheckConfig.MeasureLatency", a.ko.Spec.HealthCheckConfig.MeasureLatency, b.ko.Spec.HealthCheckConfig.MeasureLatency)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.HealthCheckConfig.Port, b.ko.Spec.HealthCheckConfig.Port) {
			delta.Add("Spec.HealthCheckConfig.Port", a.ko.Spec.HealthCheckConfig.Port, b.ko.Spec.HealthCheckConfig.Port)
		} else if a.ko.Spec.HealthCheckConfig.Port != nil && b.ko.Spec.HealthCheckConfig.Port != nil {
			if *a.ko.Spec.HealthCheckConfig.Port != *b.ko.Spec.HealthCheckConfig.Port {
				delta.Add("Spec.HealthCheckConfig.Port", a.ko.Spec.HealthCheckConfig.Port, b.ko.Spec.HealthCheckConfig.Port)
			}
		}
		if len(a.ko.Spec.HealthCheckConfig.Regions) != len(b.ko.Spec.HealthCheckConfig.Regions) {
			delta.Add("Spec.HealthCheckConfig.Regions", a.ko.Spec.HealthCheckConfig.Regions, b.ko.Spec.HealthCheckConfig.Regions)
		} else if len(a.ko.Spec.HealthCheckConfig.Regions) > 0 {
			if !ackcompare.SliceStringPEqual(a.ko.Spec.HealthCheckConfig.Regions, b.ko.Spec.HealthCheckConfig.Regions) {
				delta.Add("Spec.HealthCheckConfig.Regions", a.ko.Spec.HealthCheckConfig.Regions, b.ko.Spec.HealthCheckConfig.Regions)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.HealthCheckConfig.RequestInterval, b.ko.Spec.HealthCheckConfig.RequestInterval) {
			delta.Add("Spec.HealthCheckConfig.RequestInterval", a.ko.Spec.HealthCheckConfig.RequestInterval, b.ko.Spec.HealthCheckConfig.RequestInterval)
		} else if a.ko.Spec.HealthCheckConfig.RequestInterval != nil && b.ko.Spec.HealthCheckConfig.RequestInterval != nil {
			if *a.ko.Spec.HealthCheckConfig.RequestInterval != *b.ko.Spec.HealthCheckConfig.RequestInterval {
				delta.Add("Spec.HealthCheckConfig.RequestInterval", a.ko.Spec.HealthCheckConfig.RequestInterval, b.ko.Spec.HealthCheckConfig.RequestInterval)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.HealthCheckConfig.ResourcePath, b.ko.Spec.HealthCheckConfig.ResourcePath) {
			delta.Add("Spec.HealthCheckConfig.ResourcePath", a.ko.Spec.HealthCheckConfig.ResourcePath, b.ko.Spec.HealthCheckConfig.ResourcePath)
		} else if a.ko.Spec.HealthCheckConfig.ResourcePath != nil && b.ko.Spec.HealthCheckConfig.ResourcePath != nil {
			if *a.ko.Spec.HealthCheckConfig.ResourcePath != *b.ko.Spec.HealthCheckConfig.ResourcePath {
				delta.Add("Spec.HealthCheckConfig.ResourcePath", a.ko.Spec.HealthCheckConfig.ResourcePath, b.ko.Spec.HealthCheckConfig.ResourcePath)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.HealthCheckConfig.RoutingControlARN, b.ko.Spec.HealthCheckConfig.RoutingControlARN) {
			delta.Add("Spec.HealthCheckConfig.RoutingControlARN", a.ko.Spec.HealthCheckConfig.RoutingControlARN, b.ko.Spec.HealthCheckConfig.RoutingControlARN)
		} else if a.ko.Spec.HealthCheckConfig.RoutingControlARN != nil && b.ko.Spec.HealthCheckConfig.RoutingControlARN != nil {
			if *a.ko.Spec.HealthCheckConfig.RoutingControlARN != *b.ko.Spec.HealthCheckConfig.RoutingControlARN {
				delta.Add("Spec.HealthCheckConfig.RoutingControlARN", a.ko.Spec.HealthCheckConfig.RoutingControlARN, b.ko.Spec.HealthCheckConfig.RoutingControlARN)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.HealthCheckConfig.SearchString, b.ko.Spec.HealthCheckConfig.SearchString) {
			delta.Add("Spec.HealthCheckConfig.SearchString", a.ko.Spec.HealthCheckConfig.SearchString, b.ko.Spec.HealthCheckConfig.SearchString)
		} else if a.ko.Spec.HealthCheckConfig.SearchString != nil && b.ko.Spec.HealthCheckConfig.SearchString != nil {
			if *a.ko.Spec.HealthCheckConfig.SearchString != *b.ko.Spec.HealthCheckConfig.SearchString {
				delta.Add("Spec.HealthCheckConfig.SearchString", a.ko.Spec.HealthCheckConfig.SearchString, b.ko.Spec.HealthCheckConfig.SearchString)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.HealthCheckConfig.Type, b.ko.Spec.HealthCheckConfig.Type) {
			delta.Add("Spec.HealthCheckConfig.Type", a.ko.Spec.HealthCheckConfig.Type, b.ko.Spec.HealthCheckConfig.Type)
		} else if a.ko.Spec.HealthCheckConfig.Type != nil && b.ko.Spec.HealthCheckConfig.Type != nil {
			if *a.ko.Spec.HealthCheckConfig.Type != *b.ko.Spec.HealthCheckConfig.Type {
				delta.Add("Spec.HealthCheckConfig.Type", a.ko.Spec.HealthCheckConfig.Type, b.ko.Spec.HealthCheckConfig.Type)
			}
		}
	}

	return delta
}
