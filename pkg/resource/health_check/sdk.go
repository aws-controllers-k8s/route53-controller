// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package health_check

import (
	"context"
	"errors"
	"fmt"
	"math"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/route53"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/route53/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/route53-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.HealthCheck{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.GetHealthCheckOutput
	resp, err = rm.sdkapi.GetHealthCheck(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "GetHealthCheck", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "NoSuchHealthCheck" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.HealthCheck.CallerReference != nil {
		ko.Status.CallerReference = resp.HealthCheck.CallerReference
	} else {
		ko.Status.CallerReference = nil
	}
	if resp.HealthCheck.CloudWatchAlarmConfiguration != nil {
		f1 := &svcapitypes.CloudWatchAlarmConfiguration{}
		if resp.HealthCheck.CloudWatchAlarmConfiguration.ComparisonOperator != "" {
			f1.ComparisonOperator = aws.String(string(resp.HealthCheck.CloudWatchAlarmConfiguration.ComparisonOperator))
		}
		if resp.HealthCheck.CloudWatchAlarmConfiguration.Dimensions != nil {
			f1f1 := []*svcapitypes.Dimension{}
			for _, f1f1iter := range resp.HealthCheck.CloudWatchAlarmConfiguration.Dimensions {
				f1f1elem := &svcapitypes.Dimension{}
				if f1f1iter.Name != nil {
					f1f1elem.Name = f1f1iter.Name
				}
				if f1f1iter.Value != nil {
					f1f1elem.Value = f1f1iter.Value
				}
				f1f1 = append(f1f1, f1f1elem)
			}
			f1.Dimensions = f1f1
		}
		if resp.HealthCheck.CloudWatchAlarmConfiguration.EvaluationPeriods != nil {
			evaluationPeriodsCopy := int64(*resp.HealthCheck.CloudWatchAlarmConfiguration.EvaluationPeriods)
			f1.EvaluationPeriods = &evaluationPeriodsCopy
		}
		if resp.HealthCheck.CloudWatchAlarmConfiguration.MetricName != nil {
			f1.MetricName = resp.HealthCheck.CloudWatchAlarmConfiguration.MetricName
		}
		if resp.HealthCheck.CloudWatchAlarmConfiguration.Namespace != nil {
			f1.Namespace = resp.HealthCheck.CloudWatchAlarmConfiguration.Namespace
		}
		if resp.HealthCheck.CloudWatchAlarmConfiguration.Period != nil {
			periodCopy := int64(*resp.HealthCheck.CloudWatchAlarmConfiguration.Period)
			f1.Period = &periodCopy
		}
		if resp.HealthCheck.CloudWatchAlarmConfiguration.Statistic != "" {
			f1.Statistic = aws.String(string(resp.HealthCheck.CloudWatchAlarmConfiguration.Statistic))
		}
		if resp.HealthCheck.CloudWatchAlarmConfiguration.Threshold != nil {
			f1.Threshold = resp.HealthCheck.CloudWatchAlarmConfiguration.Threshold
		}
		ko.Status.CloudWatchAlarmConfiguration = f1
	} else {
		ko.Status.CloudWatchAlarmConfiguration = nil
	}
	if resp.HealthCheck.HealthCheckConfig != nil {
		f2 := &svcapitypes.HealthCheckConfig{}
		if resp.HealthCheck.HealthCheckConfig.AlarmIdentifier != nil {
			f2f0 := &svcapitypes.AlarmIdentifier{}
			if resp.HealthCheck.HealthCheckConfig.AlarmIdentifier.Name != nil {
				f2f0.Name = resp.HealthCheck.HealthCheckConfig.AlarmIdentifier.Name
			}
			if resp.HealthCheck.HealthCheckConfig.AlarmIdentifier.Region != "" {
				f2f0.Region = aws.String(string(resp.HealthCheck.HealthCheckConfig.AlarmIdentifier.Region))
			}
			f2.AlarmIdentifier = f2f0
		}
		if resp.HealthCheck.HealthCheckConfig.ChildHealthChecks != nil {
			f2.ChildHealthChecks = aws.StringSlice(resp.HealthCheck.HealthCheckConfig.ChildHealthChecks)
		}
		if resp.HealthCheck.HealthCheckConfig.Disabled != nil {
			f2.Disabled = resp.HealthCheck.HealthCheckConfig.Disabled
		}
		if resp.HealthCheck.HealthCheckConfig.EnableSNI != nil {
			f2.EnableSNI = resp.HealthCheck.HealthCheckConfig.EnableSNI
		}
		if resp.HealthCheck.HealthCheckConfig.FailureThreshold != nil {
			failureThresholdCopy := int64(*resp.HealthCheck.HealthCheckConfig.FailureThreshold)
			f2.FailureThreshold = &failureThresholdCopy
		}
		if resp.HealthCheck.HealthCheckConfig.FullyQualifiedDomainName != nil {
			f2.FullyQualifiedDomainName = resp.HealthCheck.HealthCheckConfig.FullyQualifiedDomainName
		}
		if resp.HealthCheck.HealthCheckConfig.HealthThreshold != nil {
			healthThresholdCopy := int64(*resp.HealthCheck.HealthCheckConfig.HealthThreshold)
			f2.HealthThreshold = &healthThresholdCopy
		}
		if resp.HealthCheck.HealthCheckConfig.IPAddress != nil {
			f2.IPAddress = resp.HealthCheck.HealthCheckConfig.IPAddress
		}
		if resp.HealthCheck.HealthCheckConfig.InsufficientDataHealthStatus != "" {
			f2.InsufficientDataHealthStatus = aws.String(string(resp.HealthCheck.HealthCheckConfig.InsufficientDataHealthStatus))
		}
		if resp.HealthCheck.HealthCheckConfig.Inverted != nil {
			f2.Inverted = resp.HealthCheck.HealthCheckConfig.Inverted
		}
		if resp.HealthCheck.HealthCheckConfig.MeasureLatency != nil {
			f2.MeasureLatency = resp.HealthCheck.HealthCheckConfig.MeasureLatency
		}
		if resp.HealthCheck.HealthCheckConfig.Port != nil {
			portCopy := int64(*resp.HealthCheck.HealthCheckConfig.Port)
			f2.Port = &portCopy
		}
		if resp.HealthCheck.HealthCheckConfig.Regions != nil {
			f2f12 := []*string{}
			for _, f2f12iter := range resp.HealthCheck.HealthCheckConfig.Regions {
				var f2f12elem *string
				f2f12elem = aws.String(string(f2f12iter))
				f2f12 = append(f2f12, f2f12elem)
			}
			f2.Regions = f2f12
		}
		if resp.HealthCheck.HealthCheckConfig.RequestInterval != nil {
			requestIntervalCopy := int64(*resp.HealthCheck.HealthCheckConfig.RequestInterval)
			f2.RequestInterval = &requestIntervalCopy
		}
		if resp.HealthCheck.HealthCheckConfig.ResourcePath != nil {
			f2.ResourcePath = resp.HealthCheck.HealthCheckConfig.ResourcePath
		}
		if resp.HealthCheck.HealthCheckConfig.RoutingControlArn != nil {
			f2.RoutingControlARN = resp.HealthCheck.HealthCheckConfig.RoutingControlArn
		}
		if resp.HealthCheck.HealthCheckConfig.SearchString != nil {
			f2.SearchString = resp.HealthCheck.HealthCheckConfig.SearchString
		}
		if resp.HealthCheck.HealthCheckConfig.Type != "" {
			f2.Type = aws.String(string(resp.HealthCheck.HealthCheckConfig.Type))
		}
		ko.Spec.HealthCheckConfig = f2
	} else {
		ko.Spec.HealthCheckConfig = nil
	}
	if resp.HealthCheck.HealthCheckVersion != nil {
		ko.Status.HealthCheckVersion = resp.HealthCheck.HealthCheckVersion
	} else {
		ko.Status.HealthCheckVersion = nil
	}
	if resp.HealthCheck.Id != nil {
		ko.Status.ID = resp.HealthCheck.Id
	} else {
		ko.Status.ID = nil
	}
	if resp.HealthCheck.LinkedService != nil {
		f5 := &svcapitypes.LinkedService{}
		if resp.HealthCheck.LinkedService.Description != nil {
			f5.Description = resp.HealthCheck.LinkedService.Description
		}
		if resp.HealthCheck.LinkedService.ServicePrincipal != nil {
			f5.ServicePrincipal = resp.HealthCheck.LinkedService.ServicePrincipal
		}
		ko.Status.LinkedService = f5
	} else {
		ko.Status.LinkedService = nil
	}

	rm.setStatusDefaults(ko)
	if err := rm.setResourceAdditionalFields(ctx, ko); err != nil {
		return nil, err
	}
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Status.ID == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.GetHealthCheckInput, error) {
	res := &svcsdk.GetHealthCheckInput{}

	if r.ko.Status.ID != nil {
		res.HealthCheckId = r.ko.Status.ID
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}
	// You must use a unique CallerReference string every time you submit a
	// CreateHealthCheck request. CallerReference can be any unique string, for
	// example, a date/timestamp.
	// TODO: Name is not sufficient, since a failed request cannot be retried.
	// We might need to import the `time` package into `sdk.go`
	input.CallerReference = aws.String(getCallerReference())

	var resp *svcsdk.CreateHealthCheckOutput
	_ = resp
	resp, err = rm.sdkapi.CreateHealthCheck(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateHealthCheck", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.HealthCheck.CallerReference != nil {
		ko.Status.CallerReference = resp.HealthCheck.CallerReference
	} else {
		ko.Status.CallerReference = nil
	}
	if resp.HealthCheck.CloudWatchAlarmConfiguration != nil {
		f1 := &svcapitypes.CloudWatchAlarmConfiguration{}
		if resp.HealthCheck.CloudWatchAlarmConfiguration.ComparisonOperator != "" {
			f1.ComparisonOperator = aws.String(string(resp.HealthCheck.CloudWatchAlarmConfiguration.ComparisonOperator))
		}
		if resp.HealthCheck.CloudWatchAlarmConfiguration.Dimensions != nil {
			f1f1 := []*svcapitypes.Dimension{}
			for _, f1f1iter := range resp.HealthCheck.CloudWatchAlarmConfiguration.Dimensions {
				f1f1elem := &svcapitypes.Dimension{}
				if f1f1iter.Name != nil {
					f1f1elem.Name = f1f1iter.Name
				}
				if f1f1iter.Value != nil {
					f1f1elem.Value = f1f1iter.Value
				}
				f1f1 = append(f1f1, f1f1elem)
			}
			f1.Dimensions = f1f1
		}
		if resp.HealthCheck.CloudWatchAlarmConfiguration.EvaluationPeriods != nil {
			evaluationPeriodsCopy := int64(*resp.HealthCheck.CloudWatchAlarmConfiguration.EvaluationPeriods)
			f1.EvaluationPeriods = &evaluationPeriodsCopy
		}
		if resp.HealthCheck.CloudWatchAlarmConfiguration.MetricName != nil {
			f1.MetricName = resp.HealthCheck.CloudWatchAlarmConfiguration.MetricName
		}
		if resp.HealthCheck.CloudWatchAlarmConfiguration.Namespace != nil {
			f1.Namespace = resp.HealthCheck.CloudWatchAlarmConfiguration.Namespace
		}
		if resp.HealthCheck.CloudWatchAlarmConfiguration.Period != nil {
			periodCopy := int64(*resp.HealthCheck.CloudWatchAlarmConfiguration.Period)
			f1.Period = &periodCopy
		}
		if resp.HealthCheck.CloudWatchAlarmConfiguration.Statistic != "" {
			f1.Statistic = aws.String(string(resp.HealthCheck.CloudWatchAlarmConfiguration.Statistic))
		}
		if resp.HealthCheck.CloudWatchAlarmConfiguration.Threshold != nil {
			f1.Threshold = resp.HealthCheck.CloudWatchAlarmConfiguration.Threshold
		}
		ko.Status.CloudWatchAlarmConfiguration = f1
	} else {
		ko.Status.CloudWatchAlarmConfiguration = nil
	}
	if resp.HealthCheck.HealthCheckConfig != nil {
		f2 := &svcapitypes.HealthCheckConfig{}
		if resp.HealthCheck.HealthCheckConfig.AlarmIdentifier != nil {
			f2f0 := &svcapitypes.AlarmIdentifier{}
			if resp.HealthCheck.HealthCheckConfig.AlarmIdentifier.Name != nil {
				f2f0.Name = resp.HealthCheck.HealthCheckConfig.AlarmIdentifier.Name
			}
			if resp.HealthCheck.HealthCheckConfig.AlarmIdentifier.Region != "" {
				f2f0.Region = aws.String(string(resp.HealthCheck.HealthCheckConfig.AlarmIdentifier.Region))
			}
			f2.AlarmIdentifier = f2f0
		}
		if resp.HealthCheck.HealthCheckConfig.ChildHealthChecks != nil {
			f2.ChildHealthChecks = aws.StringSlice(resp.HealthCheck.HealthCheckConfig.ChildHealthChecks)
		}
		if resp.HealthCheck.HealthCheckConfig.Disabled != nil {
			f2.Disabled = resp.HealthCheck.HealthCheckConfig.Disabled
		}
		if resp.HealthCheck.HealthCheckConfig.EnableSNI != nil {
			f2.EnableSNI = resp.HealthCheck.HealthCheckConfig.EnableSNI
		}
		if resp.HealthCheck.HealthCheckConfig.FailureThreshold != nil {
			failureThresholdCopy := int64(*resp.HealthCheck.HealthCheckConfig.FailureThreshold)
			f2.FailureThreshold = &failureThresholdCopy
		}
		if resp.HealthCheck.HealthCheckConfig.FullyQualifiedDomainName != nil {
			f2.FullyQualifiedDomainName = resp.HealthCheck.HealthCheckConfig.FullyQualifiedDomainName
		}
		if resp.HealthCheck.HealthCheckConfig.HealthThreshold != nil {
			healthThresholdCopy := int64(*resp.HealthCheck.HealthCheckConfig.HealthThreshold)
			f2.HealthThreshold = &healthThresholdCopy
		}
		if resp.HealthCheck.HealthCheckConfig.IPAddress != nil {
			f2.IPAddress = resp.HealthCheck.HealthCheckConfig.IPAddress
		}
		if resp.HealthCheck.HealthCheckConfig.InsufficientDataHealthStatus != "" {
			f2.InsufficientDataHealthStatus = aws.String(string(resp.HealthCheck.HealthCheckConfig.InsufficientDataHealthStatus))
		}
		if resp.HealthCheck.HealthCheckConfig.Inverted != nil {
			f2.Inverted = resp.HealthCheck.HealthCheckConfig.Inverted
		}
		if resp.HealthCheck.HealthCheckConfig.MeasureLatency != nil {
			f2.MeasureLatency = resp.HealthCheck.HealthCheckConfig.MeasureLatency
		}
		if resp.HealthCheck.HealthCheckConfig.Port != nil {
			portCopy := int64(*resp.HealthCheck.HealthCheckConfig.Port)
			f2.Port = &portCopy
		}
		if resp.HealthCheck.HealthCheckConfig.Regions != nil {
			f2f12 := []*string{}
			for _, f2f12iter := range resp.HealthCheck.HealthCheckConfig.Regions {
				var f2f12elem *string
				f2f12elem = aws.String(string(f2f12iter))
				f2f12 = append(f2f12, f2f12elem)
			}
			f2.Regions = f2f12
		}
		if resp.HealthCheck.HealthCheckConfig.RequestInterval != nil {
			requestIntervalCopy := int64(*resp.HealthCheck.HealthCheckConfig.RequestInterval)
			f2.RequestInterval = &requestIntervalCopy
		}
		if resp.HealthCheck.HealthCheckConfig.ResourcePath != nil {
			f2.ResourcePath = resp.HealthCheck.HealthCheckConfig.ResourcePath
		}
		if resp.HealthCheck.HealthCheckConfig.RoutingControlArn != nil {
			f2.RoutingControlARN = resp.HealthCheck.HealthCheckConfig.RoutingControlArn
		}
		if resp.HealthCheck.HealthCheckConfig.SearchString != nil {
			f2.SearchString = resp.HealthCheck.HealthCheckConfig.SearchString
		}
		if resp.HealthCheck.HealthCheckConfig.Type != "" {
			f2.Type = aws.String(string(resp.HealthCheck.HealthCheckConfig.Type))
		}
		ko.Spec.HealthCheckConfig = f2
	} else {
		ko.Spec.HealthCheckConfig = nil
	}
	if resp.HealthCheck.HealthCheckVersion != nil {
		ko.Status.HealthCheckVersion = resp.HealthCheck.HealthCheckVersion
	} else {
		ko.Status.HealthCheckVersion = nil
	}
	if resp.HealthCheck.Id != nil {
		ko.Status.ID = resp.HealthCheck.Id
	} else {
		ko.Status.ID = nil
	}
	if resp.HealthCheck.LinkedService != nil {
		f5 := &svcapitypes.LinkedService{}
		if resp.HealthCheck.LinkedService.Description != nil {
			f5.Description = resp.HealthCheck.LinkedService.Description
		}
		if resp.HealthCheck.LinkedService.ServicePrincipal != nil {
			f5.ServicePrincipal = resp.HealthCheck.LinkedService.ServicePrincipal
		}
		ko.Status.LinkedService = f5
	} else {
		ko.Status.LinkedService = nil
	}

	rm.setStatusDefaults(ko)
	if ko.Status.ID != nil {
		latest := &resource{}
		latest.ko = &svcapitypes.HealthCheck{}
		latest.ko.Status.ID = ko.Status.ID

		// This is create operation. So, no tags are present in HealthCheck.
		// So, 'latest' is empty except we have copied 'ID' into the status to
		// make syncTags() happy.
		if err := rm.syncTags(ctx, desired, latest); err != nil {
			return nil, err
		}
	}

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateHealthCheckInput, error) {
	res := &svcsdk.CreateHealthCheckInput{}

	if r.ko.Spec.HealthCheckConfig != nil {
		f0 := &svcsdktypes.HealthCheckConfig{}
		if r.ko.Spec.HealthCheckConfig.AlarmIdentifier != nil {
			f0f0 := &svcsdktypes.AlarmIdentifier{}
			if r.ko.Spec.HealthCheckConfig.AlarmIdentifier.Name != nil {
				f0f0.Name = r.ko.Spec.HealthCheckConfig.AlarmIdentifier.Name
			}
			if r.ko.Spec.HealthCheckConfig.AlarmIdentifier.Region != nil {
				f0f0.Region = svcsdktypes.CloudWatchRegion(*r.ko.Spec.HealthCheckConfig.AlarmIdentifier.Region)
			}
			f0.AlarmIdentifier = f0f0
		}
		if r.ko.Spec.HealthCheckConfig.ChildHealthChecks != nil {
			f0.ChildHealthChecks = aws.ToStringSlice(r.ko.Spec.HealthCheckConfig.ChildHealthChecks)
		}
		if r.ko.Spec.HealthCheckConfig.Disabled != nil {
			f0.Disabled = r.ko.Spec.HealthCheckConfig.Disabled
		}
		if r.ko.Spec.HealthCheckConfig.EnableSNI != nil {
			f0.EnableSNI = r.ko.Spec.HealthCheckConfig.EnableSNI
		}
		if r.ko.Spec.HealthCheckConfig.FailureThreshold != nil {
			failureThresholdCopy0 := *r.ko.Spec.HealthCheckConfig.FailureThreshold
			if failureThresholdCopy0 > math.MaxInt32 || failureThresholdCopy0 < math.MinInt32 {
				return nil, fmt.Errorf("error: field FailureThreshold is of type int32")
			}
			failureThresholdCopy := int32(failureThresholdCopy0)
			f0.FailureThreshold = &failureThresholdCopy
		}
		if r.ko.Spec.HealthCheckConfig.FullyQualifiedDomainName != nil {
			f0.FullyQualifiedDomainName = r.ko.Spec.HealthCheckConfig.FullyQualifiedDomainName
		}
		if r.ko.Spec.HealthCheckConfig.HealthThreshold != nil {
			healthThresholdCopy0 := *r.ko.Spec.HealthCheckConfig.HealthThreshold
			if healthThresholdCopy0 > math.MaxInt32 || healthThresholdCopy0 < math.MinInt32 {
				return nil, fmt.Errorf("error: field HealthThreshold is of type int32")
			}
			healthThresholdCopy := int32(healthThresholdCopy0)
			f0.HealthThreshold = &healthThresholdCopy
		}
		if r.ko.Spec.HealthCheckConfig.IPAddress != nil {
			f0.IPAddress = r.ko.Spec.HealthCheckConfig.IPAddress
		}
		if r.ko.Spec.HealthCheckConfig.InsufficientDataHealthStatus != nil {
			f0.InsufficientDataHealthStatus = svcsdktypes.InsufficientDataHealthStatus(*r.ko.Spec.HealthCheckConfig.InsufficientDataHealthStatus)
		}
		if r.ko.Spec.HealthCheckConfig.Inverted != nil {
			f0.Inverted = r.ko.Spec.HealthCheckConfig.Inverted
		}
		if r.ko.Spec.HealthCheckConfig.MeasureLatency != nil {
			f0.MeasureLatency = r.ko.Spec.HealthCheckConfig.MeasureLatency
		}
		if r.ko.Spec.HealthCheckConfig.Port != nil {
			portCopy0 := *r.ko.Spec.HealthCheckConfig.Port
			if portCopy0 > math.MaxInt32 || portCopy0 < math.MinInt32 {
				return nil, fmt.Errorf("error: field Port is of type int32")
			}
			portCopy := int32(portCopy0)
			f0.Port = &portCopy
		}
		if r.ko.Spec.HealthCheckConfig.Regions != nil {
			f0f12 := []svcsdktypes.HealthCheckRegion{}
			for _, f0f12iter := range r.ko.Spec.HealthCheckConfig.Regions {
				var f0f12elem string
				f0f12elem = string(*f0f12iter)
				f0f12 = append(f0f12, svcsdktypes.HealthCheckRegion(f0f12elem))
			}
			f0.Regions = f0f12
		}
		if r.ko.Spec.HealthCheckConfig.RequestInterval != nil {
			requestIntervalCopy0 := *r.ko.Spec.HealthCheckConfig.RequestInterval
			if requestIntervalCopy0 > math.MaxInt32 || requestIntervalCopy0 < math.MinInt32 {
				return nil, fmt.Errorf("error: field RequestInterval is of type int32")
			}
			requestIntervalCopy := int32(requestIntervalCopy0)
			f0.RequestInterval = &requestIntervalCopy
		}
		if r.ko.Spec.HealthCheckConfig.ResourcePath != nil {
			f0.ResourcePath = r.ko.Spec.HealthCheckConfig.ResourcePath
		}
		if r.ko.Spec.HealthCheckConfig.RoutingControlARN != nil {
			f0.RoutingControlArn = r.ko.Spec.HealthCheckConfig.RoutingControlARN
		}
		if r.ko.Spec.HealthCheckConfig.SearchString != nil {
			f0.SearchString = r.ko.Spec.HealthCheckConfig.SearchString
		}
		if r.ko.Spec.HealthCheckConfig.Type != nil {
			f0.Type = svcsdktypes.HealthCheckType(*r.ko.Spec.HealthCheckConfig.Type)
		}
		res.HealthCheckConfig = f0
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (*resource, error) {
	return rm.customUpdateHealthCheck(ctx, desired, latest, delta)
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteHealthCheckOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteHealthCheck(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteHealthCheck", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteHealthCheckInput, error) {
	res := &svcsdk.DeleteHealthCheckInput{}

	if r.ko.Status.ID != nil {
		res.HealthCheckId = r.ko.Status.ID
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.HealthCheck,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}

	var terminalErr smithy.APIError
	if !errors.As(err, &terminalErr) {
		return false
	}
	switch terminalErr.ErrorCode() {
	case "InvalidInput",
		"HealthCheckInUse":
		return true
	default:
		return false
	}
}

// getImmutableFieldChanges returns list of immutable fields from the
func (rm *resourceManager) getImmutableFieldChanges(
	delta *ackcompare.Delta,
) []string {
	var fields []string
	if delta.DifferentAt("Spec.HealthCheckConfig.MeasureLatency") {
		fields = append(fields, "HealthCheckConfig.MeasureLatency")
	}
	if delta.DifferentAt("Spec.HealthCheckConfig.RequestInterval") {
		fields = append(fields, "HealthCheckConfig.RequestInterval")
	}
	if delta.DifferentAt("Spec.HealthCheckConfig.RoutingControlArn") {
		fields = append(fields, "HealthCheckConfig.RoutingControlArn")
	}
	if delta.DifferentAt("Spec.HealthCheckConfig.Type") {
		fields = append(fields, "HealthCheckConfig.Type")
	}

	return fields
}

func (rm *resourceManager) newTag(
	c svcapitypes.Tag,
) svcsdktypes.Tag {
	res := svcsdktypes.Tag{}
	if c.Key != nil {
		res.Key = c.Key
	}
	if c.Value != nil {
		res.Value = c.Value
	}

	return res
}
