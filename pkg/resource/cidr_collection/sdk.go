// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package cidr_collection

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/route53"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/route53-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.Route53{}
	_ = &svcapitypes.CIDRCollection{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadManyInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newListRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.ListCidrCollectionsOutput
	resp, err = rm.sdkapi.ListCidrCollectionsWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_MANY", "ListCidrCollections", err)
	if err != nil {
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "UNKNOWN" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	// ListCidrCollections does not result in an exact match of relevant cidr locations as
	// there is no filter option, so we need to filter here
	// Furthermore we need different api calls to get the cidrLocations and cidrBlocks associated with the cidr Collection
	var resourceId string
	if ko.Status.Collection != nil {
		if ko.Status.Collection.ID != nil {
			resourceId = *ko.Status.Collection.ID
		}
	}

	var cidrCollections []*svcsdk.CollectionSummary
	for _, elem := range resp.CidrCollections {
		elemId := *elem.Id
		if elemId == resourceId {
			cidrCollections = append(cidrCollections, elem)
			if ko.Status.Collection == nil {
				ko.Status.Collection = &svcapitypes.CIDRCollection_SDK{}
			}
			ko.Status.Collection.ARN = elem.Arn
			ko.Status.Collection.ID = elem.Id
			ko.Status.Collection.Name = elem.Name
			ko.Status.Collection.Version = elem.Version
		}
	}

	if len(cidrCollections) == 0 {
		return nil, ackerr.NotFound
	}

	inputListCidrLocations, err := rm.newListCidrLocationsRequestPayload(r)
	if err != nil {
		return nil, err
	}
	inputListCidrLocations.SetCollectionId(*ko.Status.Collection.ID)
	respListCidrLocations, err := rm.sdkapi.ListCidrLocationsWithContext(ctx, inputListCidrLocations)
	rm.metrics.RecordAPICall("READ_MANY", "ListCidrLocations", err)
	if err != nil {
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "UNKNOWN" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	var locations []*svcapitypes.CIDRCollectionChange
	for _, elemCidrLocation := range respListCidrLocations.CidrLocations {
		location := svcapitypes.CIDRCollectionChange{}
		location.LocationName = elemCidrLocation.LocationName

		inputListCidrBlocks, err := rm.newListCidrBlocksRequestPayload(r)
		if err != nil {
			return nil, err
		}
		inputListCidrBlocks.SetCollectionId(*ko.Status.Collection.ID)
		inputListCidrBlocks.SetLocationName(*elemCidrLocation.LocationName)
		respListCidrBlocks, err := rm.sdkapi.ListCidrBlocksWithContext(ctx, inputListCidrBlocks)
		rm.metrics.RecordAPICall("READ_MANY", "ListCidrBlocks", err)
		if err != nil {
			if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "UNKNOWN" {
				return nil, ackerr.NotFound
			}
			return nil, err
		}

		var cidrList []*string
		for _, elemcidrBlock := range respListCidrBlocks.CidrBlocks {
			cidrList = append(cidrList, elemcidrBlock.CidrBlock)
		}
		location.CIDRList = cidrList
		locations = append(locations, &location)
	}
	if ko.Spec.Locations == nil {
		ko.Spec.Locations = []*svcapitypes.CIDRCollectionChange{}
	}
	ko.Spec.Locations = locations

	resp.CidrCollections = cidrCollections

	found := false
	for _, elem := range resp.CidrCollections {
		if elem.Arn != nil {
			if ko.Status.ACKResourceMetadata == nil {
				ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
			}
			tmpARN := ackv1alpha1.AWSResourceName(*elem.Arn)
			ko.Status.ACKResourceMetadata.ARN = &tmpARN
		}
		if elem.Name != nil {
			ko.Spec.Name = elem.Name
		} else {
			ko.Spec.Name = nil
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadManyInput returns true if there are any fields
// for the ReadMany Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadManyInput(
	r *resource,
) bool {
	return false
}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.ListCidrCollectionsInput, error) {
	res := &svcsdk.ListCidrCollectionsInput{}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}
	// You must use a unique CallerReference string every time you submit a
	// CreateHealthCheck request. CallerReference can be any unique string, for
	// example, a date/timestamp.
	// TODO: Name is not sufficient, since a failed request cannot be retried.
	// We might need to import the `time` package into `sdk.go`
	callerReference := getCallerReference()
	input.SetCallerReference(callerReference)

	var resp *svcsdk.CreateCidrCollectionOutput
	_ = resp
	resp, err = rm.sdkapi.CreateCidrCollectionWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateCidrCollection", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.Collection != nil {
		f0 := &svcapitypes.CIDRCollection_SDK{}
		if resp.Collection.Arn != nil {
			f0.ARN = resp.Collection.Arn
		}
		if resp.Collection.Id != nil {
			f0.ID = resp.Collection.Id
		}
		if resp.Collection.Name != nil {
			f0.Name = resp.Collection.Name
		}
		if resp.Collection.Version != nil {
			f0.Version = resp.Collection.Version
		}
		ko.Status.Collection = f0
	} else {
		ko.Status.Collection = nil
	}
	if resp.Location != nil {
		ko.Status.Location = resp.Location
	} else {
		ko.Status.Location = nil
	}

	rm.setStatusDefaults(ko)
	ko.Status.CallerReference = &callerReference
	updatedResource, err := rm.customUpdateCidrCollection(ctx, &resource{ko}, nil, nil)
	if err != nil {
		return nil, err
	}
	ko = updatedResource.ko.DeepCopy()

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateCidrCollectionInput, error) {
	res := &svcsdk.CreateCidrCollectionInput{}

	if r.ko.Spec.Name != nil {
		res.SetName(*r.ko.Spec.Name)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (*resource, error) {
	return rm.customUpdateCidrCollection(ctx, desired, latest, delta)
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	ko := r.ko.DeepCopy()
	ko.Spec.Locations = nil
	desired := &resource{ko}
	_, err = rm.customUpdateCidrCollection(ctx, desired, r, nil)
	if err != nil {
		return nil, err
	}
	input.SetId(*r.ko.Status.Collection.ID)

	var resp *svcsdk.DeleteCidrCollectionOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteCidrCollectionWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteCidrCollection", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteCidrCollectionInput, error) {
	res := &svcsdk.DeleteCidrCollectionInput{}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.CIDRCollection,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}
	awsErr, ok := ackerr.AWSError(err)
	if !ok {
		return false
	}
	switch awsErr.Code() {
	case "InvalidInput",
		"CidrCollectionAlreadyExists",
		"CidrCollectionInUse",
		"CidrCollectionVersionMismatch",
		"NoSuchCidrCollection",
		"CidrBlockInUse":
		return true
	default:
		return false
	}
}

// getImmutableFieldChanges returns list of immutable fields from the
func (rm *resourceManager) getImmutableFieldChanges(
	delta *ackcompare.Delta,
) []string {
	var fields []string
	if delta.DifferentAt("Spec.Name") {
		fields = append(fields, "Name")
	}

	return fields
}
